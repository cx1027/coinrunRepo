#data_p3 <- data_p3%>%filter(data_p3$weight == "0.000000|1.000000" )
plot_ly(data_p3, x = ~Q_finalreward_delta.1, y = ~Q_finalreward_select.1, z = ~weight, type = 'scatter3d', mode = 'lines',
color = ~weight)%>%
layout(title = 'Weights VS Delta Predicition VS Selected Predction on s13 in Maze6'
,scene = list(xaxis = list(title = "Delta Reward"),
yaxis = list(title = "Selected Reward"),
zaxis = list(title = "Weight"))
)
library(plotly)
packageVersion('plotly')
unique(data_p1$weight)
data<-read.csv(file='/Users/X/Documents/R_data/data_MOXCS2018/3d_plot/maze5_3d_s3_0129.csv',header = T,sep=",")#maze5
data_p1 <- data%>%filter(data$OpenState == "s3" )
plot_ly(data_p1, x = ~Q_finalreward_delta.1, y = ~Q_finalreward_select.1, z = ~weight, type = 'scatter3d', mode = 'lines',
color = ~weight)%>%
layout(title = 'Weights VS Delta Predicition VS Selected Predction on s3 in Maze5'
,scene = list(xaxis = list(title = "Delta Reward"),
yaxis = list(title = "Selected Reward"),
zaxis = list(title = "Weight"))
)
data_p2<-read.csv(file='/Users/X/Documents/R_data/data_MOXCS2018/3d_plot/s10_maze4.csv',header = T,sep=",")#maze4
data_p2 <- data_p2%>%filter(data_p2$OpenState == "s10" )
plot_ly(data_p2, x = ~Q_finalreward_delta.1, y = ~Q_finalreward_select.1, z = ~weight, type = 'scatter3d', mode = 'lines',
color = ~weight)%>%
layout(title = 'Weights VS Delta Predicition VS Selected Predction on s10 in Maze4'
,scene = list(xaxis = list(title = "Delta Reward"),
yaxis = list(title = "Selected Reward"),
zaxis = list(title = "Weight"))
)
data_p3<-read.csv(file='/Users/X/Documents/R_data/data_MOXCS2018/3d_plot/s6_22_finalselect.csv',header = T,sep=",")#maze6
#data_p3 <- data_p3%>%filter(data_p3$weight == "0.000000|1.000000" )
plot_ly(data_p3, x = ~Q_finalreward_delta.1, y = ~Q_finalreward_select.1, z = ~weight, type = 'scatter3d', mode = 'lines',
color = ~weight)%>%
layout(title = 'Weights VS Delta Predicition VS Selected Predction on s13 in Maze6'
,scene = list(xaxis = list(title = "Delta Reward"),
yaxis = list(title = "Selected Reward"),
zaxis = list(title = "Weight"))
)
library(plotly)
packageVersion('plotly')
mycolors=gray(0:10/10)
unique(data_p1$weight)
data<-read.csv(file='/Users/X/Documents/R_data/data_MOXCS2018/3d_plot/maze5_3d_s3_0129.csv',header = T,sep=",")#maze5
data_p1 <- data%>%filter(data$OpenState == "s3" )
plot_ly(data_p1, x = ~Q_finalreward_delta.1, y = ~Q_finalreward_select.1, z = ~weight, type = 'scatter3d', mode = 'lines',
color = ~weight, colors = mycolors)%>%
layout(title = 'Weights VS Delta Predicition VS Selected Predction on s3 in Maze5'
,scene = list(xaxis = list(title = "Delta Reward"),
yaxis = list(title = "Selected Reward"),
zaxis = list(title = "Weight"))
)
library(plotly)
packageVersion('plotly')
mycolors=gray(1:10/10)
unique(data_p1$weight)
data<-read.csv(file='/Users/X/Documents/R_data/data_MOXCS2018/3d_plot/maze5_3d_s3_0129.csv',header = T,sep=",")#maze5
data_p1 <- data%>%filter(data$OpenState == "s3" )
plot_ly(data_p1, x = ~Q_finalreward_delta.1, y = ~Q_finalreward_select.1, z = ~weight, type = 'scatter3d', mode = 'lines',
color = ~weight, colors = mycolors)%>%
layout(title = 'Weights VS Delta Predicition VS Selected Predction on s3 in Maze5'
,scene = list(xaxis = list(title = "Delta Reward"),
yaxis = list(title = "Selected Reward"),
zaxis = list(title = "Weight"))
)
library(plotly)
packageVersion('plotly')
mycolors=gray(2:10/10)
unique(data_p1$weight)
data<-read.csv(file='/Users/X/Documents/R_data/data_MOXCS2018/3d_plot/maze5_3d_s3_0129.csv',header = T,sep=",")#maze5
data_p1 <- data%>%filter(data$OpenState == "s3" )
plot_ly(data_p1, x = ~Q_finalreward_delta.1, y = ~Q_finalreward_select.1, z = ~weight, type = 'scatter3d', mode = 'lines',
color = ~weight, colors = mycolors)%>%
layout(title = 'Weights VS Delta Predicition VS Selected Predction on s3 in Maze5'
,scene = list(xaxis = list(title = "Delta Reward"),
yaxis = list(title = "Selected Reward"),
zaxis = list(title = "Weight"))
)
library(plotly)
packageVersion('plotly')
mycolors=gray(0:10/10)
unique(data_p1$weight)
data<-read.csv(file='/Users/X/Documents/R_data/data_MOXCS2018/3d_plot/maze5_3d_s3_0129.csv',header = T,sep=",")#maze5
data_p1 <- data%>%filter(data$OpenState == "s3" )
plot_ly(data_p1, x = ~Q_finalreward_delta.1, y = ~Q_finalreward_select.1, z = ~weight, type = 'scatter3d', mode = 'lines',
color = ~weight, colors = mycolors)%>%
layout(title = 'Weights VS Delta Predicition VS Selected Predction on s3 in Maze5'
,scene = list(xaxis = list(title = "Delta Reward"),
yaxis = list(title = "Selected Reward"),
zaxis = list(title = "Weight"))
)
plot_ly(data_p2, x = ~Q_finalreward_delta.1, y = ~Q_finalreward_select.1, z = ~weight, type = 'scatter3d', mode = 'lines',
color = ~weight, colors = mycolors)%>%
layout(title = 'Weights VS Delta Predicition VS Selected Predction on s10 in Maze4'
,scene = list(xaxis = list(title = "Delta Reward"),
yaxis = list(title = "      Selected Reward"),
zaxis = list(title = "Weight"))
)
mycolors=gray(0:10/10)
unique(data_p1$weight)
data<-read.csv(file='/Users/X/Documents/R_data/data_MOXCS2018/3d_plot/maze5_3d_s3_0129.csv',header = T,sep=",")#maze5
data_p1 <- data%>%filter(data$OpenState == "s3" )
plot_ly(data_p1, x = ~Q_finalreward_delta.1, y = ~Q_finalreward_select.1, z = ~weight, type = 'scatter3d', mode = 'lines',
color = ~weight, colors = mycolors)%>%
layout(title = 'Weights VS Delta Predicition VS Selected Predction on s3 in Maze5'
,scene = list(xaxis = list(title = "Delta Reward"),
yaxis = list(title = "       Selected Reward"),
zaxis = list(title = "Weight"))
)
mycolors=gray(0:10/10)
unique(data_p1$weight)
data<-read.csv(file='/Users/X/Documents/R_data/data_MOXCS2018/3d_plot/maze5_3d_s3_0129.csv',header = T,sep=",")#maze5
data_p1 <- data%>%filter(data$OpenState == "s3" )
plot_ly(data_p1, x = ~Q_finalreward_delta.1, y = ~Q_finalreward_select.1, z = ~weight, type = 'scatter3d', mode = 'lines',
color = ~weight, colors = mycolors)%>%
layout(title = 'Weights VS Delta Predicition VS Selected Predction on s3 in Maze5'
,scene = list(xaxis = list(title = "Delta Reward"),
yaxis = list(title = "          Selected Reward"),
zaxis = list(title = "Weight"))
)
data_p3<-read.csv(file='/Users/X/Documents/R_data/data_MOXCS2018/3d_plot/s6_22_finalselect.csv',header = T,sep=",")#maze6
#data_p3 <- data_p3%>%filter(data_p3$weight == "0.000000|1.000000" )
plot_ly(data_p3, x = ~Q_finalreward_delta.1, y = ~Q_finalreward_select.1, z = ~weight, type = 'scatter3d', mode = 'lines',
color = ~weight, colors = mycolors)%>%
layout(title = 'Weights VS Delta Predicition VS Selected Predction on s13 in Maze6'
,scene = list(xaxis = list(title = "Delta Reward"),
yaxis = list(title = "      Selected Reward"),
zaxis = list(title = "Weight"))
)
install.packages("TraMineR")
library("TraMineR")
install.packages("TraMineR")
install.packages("TraMineR")
install.packages("TraMineR")
install.packages("TraMineR")
library("TraMineR")
data(mvad)
install.packages("TraMineR")
library("TraMineR")
data(mvad)
install.packages("TraMineR")
install.packages("TraMineR")
install.packages("TraMineR")
library("TraMineR")
install.packages("TraMineR")
library("TraMineR")
data("mvad")
summary("mvad")
data(mvad)
summary(mvad)
myseq<-seqdef(mvad,17:86)
seqiplot(myseq)
seqfplot(myseq)
seqdplot(myseq)
seqHtplot(myseq)
myturbulence<-seqST(myseq)
hist(myturbulence)
summary(mvad)
summary(mvad)
seqiplot(myseq)
seqfplot(myseq)
seqdplot(myseq)
library("TraMineR")
data(mvad)
data[1:4,]
data(mvad)
summary(mvad)
myseq<-seqdef(mvad,17:86)
myseq[1:4,]
seqHtplot(myseq)
myturbulence<-seqST(myseq)
View(myturbulence)
hist(myturbulence)
seqdplot(mvad.seq, group=pamclustfac, border=NA)
seqdplot(myseq, group=pamclustfac, border=NA)
seqdplot(myseq, border=NA)
seqdplot(myseq, group=mvad$funemp, border=NA)
funemp_assoc <- dissassoc(mvad.dist, mvad$funemp, R = 5000)
funemp_assoc <- dissassoc(mvad.dist, mvad$funemp, R = 5000)
mvad.id
mvad[dist]
mvad.dist
mvad.dist <- seqdist(mvad.seq, method="HAM", sm="CONSTANT")
st <- seqtree(myseq ~ gcse5eq + Grammar + funemp + sex,
+ data = mvad, R = 5000, diss = mvad.dist)
seqtreedisplay(st, type = "d", border = NA)
mvad.dist <- seqdist(mvad.seq, method="HAM", sm="CONSTANT")
mvad.dist <- seqdist(myseq, method="HAM", sm="CONSTANT")
st <- seqtree(myseq ~ gcse5eq + Grammar + funemp + sex,
data = mvad, R = 5000, diss = mvad.dist)
st <- seqtree(myseq ~ gcse5eq + Grammar + funemp + sex,
+data = mvad, R = 5000, diss = mvad.dist)
st <- seqtree(myseq ~ gcse5eq + Grammar + funemp + male,
+data = mvad, R = 5000, diss = mvad.dist)
st <- seqtree(myseq ~ gcse5eq + Grammar + funemp + male,
data = mvad, R = 5000, diss = mvad.dist)
seqtreedisplay(st, type = "d", border = NA)
seqtreedisplay(st, type = "d", border = NA)
## Clustering
wardCluster <- hclust(as.dist(mvad.dist), method = "ward", members = mvad$weight)
library(TraMineR)
library(WeightedCluster)
data(mvad)
mvad.alphabet <- c("employment", "FE", "HE", "joblessness", "school", "training")
mvad.labels <- c("Employment", "Further Education", "Higher Education", "Joblessness", "School", "Training")
mvad.scodes <- c("EM", "FE", "HE", "JL", "SC", "TR")
## Define sequence objects
mvad.seq <- seqdef(mvad[, 17:86], alphabet = mvad.alphabet, states = mvad.scodes, labels = mvad.labels, weights = mvad$weight, xtstep = 6)
## Computing OM dissimilarities
mvad.dist <- seqdist(mvad.seq, method="HAM", sm="CONSTANT")
## Clustering
wardCluster <- hclust(as.dist(mvad.dist), method = "ward", members = mvad$weight)
clust4 <- cutree(wardCluster, k = 4)
## Silhouettes
sil <- wcSilhouetteObs(mvad.dist, clust4, weights = mvad$weight, measure = "ASWw")
## Sequence index plots ordered by representativeness
seqIplot(mvad.seq, group = clust4, sortv = sil)
seqIplot(mvad.seq, group = clust4)
cl4.lab <- factor(mvad.cl4, labels = paste("Cluster", 1:4))
library(TraMineR)
data(mvad)
#format data
mvad.alphab <- c("employment", "FE", "HE", "joblessness","school", "training")
mvad.seq <- seqdef(mvad, 17:86, xtstep = 6, alphabet = mvad.alphab)
#compute distance
mvad.om <- seqdist(mvad.seq, method = "OM", indel = 1, sm = "TRATE")
#clustering
library("cluster")
clusterward <- agnes(mvad.om, diss = TRUE, method = "ward")
mvad.cl4 <- cutree(clusterward, k = 4)
cl4.lab <- factor(mvad.cl4, labels = paste("Cluster", 1:4))
seqdplot(mvad.seq, group = cl4.lab, border = NA)
#compute distance
mvad.om <- seqdist(mvad.seq, method = "OM", indel = 1, sm = "TRATE")
library(TraMineR)
data(mvad)
#format data
mvad.alphab <- c("employment", "FE", "HE", "joblessness","school", "training")
mvad.seq <- seqdef(mvad, 17:86, xtstep = 6, alphabet = mvad.alphab)
#compute distance
mvad.om <- seqdist(mvad.seq, method = "OM", indel = 1, sm = "TRATE")
#clustering
library("cluster")
clusterward <- agnes(mvad.om, diss = TRUE, method = "ward")
mvad.cl4 <- cutree(clusterward, k = 4)
cl4.lab <- factor(mvad.cl4, labels = paste("Cluster", 1:4))
#visualize
seqdplot(mvad.seq, group = cl4.lab, border = NA)
dev.off()
seqdplot(mvad.seq, group = cl4.lab, border = NA)
library(TraMineR)
data(mvad)
#format data
mvad.alphab <- c("employment", "FE", "HE", "joblessness","school", "training")
mvad.seq <- seqdef(mvad, 17:86, xtstep = 6, alphabet = mvad.alphab)
#compute distance
mvad.om <- seqdist(mvad.seq, method = "OM", indel = 1, sm = "TRATE")
#clustering
library("cluster")
clusterward <- agnes(mvad.om, diss = TRUE, method = "ward")
mvad.cl4 <- cutree(clusterward, k = 4)
cl4.lab <- factor(mvad.cl4, labels = paste("Cluster", 1:4))
#visualize
dev.off()
seqdplot(mvad.seq, group = cl4.lab, border = NA)
library(TraMineR)
data(mvad)
#format data
mvad.alphab <- c("employment", "FE", "HE", "joblessness","school", "training")
mvad.seq <- seqdef(mvad, 17:86, xtstep = 6, alphabet = mvad.alphab)
#compute distance
mvad.om <- seqdist(mvad.seq, method = "OM", indel = 1, sm = "TRATE")
#clustering
library("cluster")
clusterward <- agnes(mvad.om, diss = TRUE, method = "ward")
mvad.cl4 <- cutree(clusterward, k = 4)
cl4.lab <- factor(mvad.cl4, labels = paste("Cluster", 1:4))
#visualize
dev.off()
graphics.off()
seqdplot(mvad.seq, group = cl4.lab, border = NA)
entropies <- seqient(mvad.seq)
entropies <- seqient(mvad.seq)
lm.ent <- lm(entropies ~ male + funemp + gcse5eq, mvad)
seqmtplot(mvad.seq, group = mvad$funemp, ylim = c(0, 30))
mvad.trate <- seqtrate(mvad.seq)
round(mvad.trate, 2)
mvad.trate <- seqtrate(mvad.seq)
round(mvad.trate, 2)
mvad.dist <- seqdist(myseq, method="HAM", sm="CONSTANT")
st <- seqtree(myseq ~ gcse5eq + Grammar + funemp + male,
data = mvad, R = 5000, diss = mvad.dist)
seqtreedisplay(st, type = "d", border = NA)
print(st)
lm.ent
saveHTML({
for (y in unique(population$year)) {
pop_year <- subset(population, year==y & age %in% ages)
female <- pop_year$female_pct
male <- pop_year$male_pct
par(cex=0.8)
par(mar=pyramid.plot(male, female, top.labels=c("Male", "", "Female"), labels=ages, main=y, lxcol="#A097CC", rxcol="#EDBFBE", xlim=c(10,10), gap=0, unit=""))
}
}, htmlfile = "population-pyramid-animated.html", interval=0.15, nmax=100, ani.width=650, ani.height=400)
library(animation)
# Load the data. Source: US Census Bureau
population <- read.csv("data/us-pop-age-sex.csv", stringsAsFactors=FALSE)
#
# Pyramid chart for one year, using plotrix package
#
library(plotrix)
# Subset on age and sex
ages <- unique(population$age)[-1]  # Won't chart the total
pop2015 <- subset(population, year==2015 & age %in% ages)
female <- pop2015$female_pct
male <- pop2015$male_pct
# Draw the plot
pyramid.plot(male, female, labels=ages, main="US Population 2015")
# Simplified
par(cex=0.85)
par(mar=pyramid.plot(male, female, labels=ages, main="Population Percentages by Age and Sex, 2015", lxcol="#A097CC", rxcol="#EDBFBE", unit="", xlim=c(10,10), gap=0))
# Plot for every year.
par(mfrow=c(4,4))
for (y in unique(population$year)) {
pop_year <- subset(population, year==y & age %in% ages)
female <- pop_year$female_pct
male <- pop_year$male_pct
par(cex=0.6)
par(mar=pyramid.plot(male, female, top.labels=c("Male", "", "Female"), labels=ages, main=y, lxcol="#A097CC", rxcol="#EDBFBE", xlim=c(10,10), gap=0, unit=""))
}
#
# Animate
#
ani.options(outdir = paste(getwd(), "/images", sep=""))
saveGIF({
for (y in unique(population$year)) {
pop_year <- subset(population, year==y & age %in% ages)
female <- pop_year$female_pct
male <- pop_year$male_pct
par(cex=0.8)
par(mar=pyramid.plot(male, female, top.labels=c("Male", "", "Female"), labels=ages, main=y, lxcol="#A097CC", rxcol="#EDBFBE", xlim=c(10,10), gap=0, unit=""))
}
}, movie.name = "population-pyramid-animated.gif", interval=0.15, nmax=100, ani.width=650, ani.height=400)
saveHTML({
for (y in unique(population$year)) {
pop_year <- subset(population, year==y & age %in% ages)
female <- pop_year$female_pct
male <- pop_year$male_pct
par(cex=0.8)
par(mar=pyramid.plot(male, female, top.labels=c("Male", "", "Female"), labels=ages, main=y, lxcol="#A097CC", rxcol="#EDBFBE", xlim=c(10,10), gap=0, unit=""))
}
}, htmlfile = "population-pyramid-animated.html", interval=0.15, nmax=100, ani.width=650, ani.height=400)
library(animation)
# Load the data. Source: US Census Bureau
population <- read.csv("data/us-pop-age-sex.csv", stringsAsFactors=FALSE)
library(animation)
# Load the data. Source: US Census Bureau
population <- read.csv("data/us-pop-age-sex.csv", stringsAsFactors=FALSE)
#
# Pyramid chart for one year, using plotrix package
#
library(plotrix)
# Subset on age and sex
ages <- unique(population$age)[-1]  # Won't chart the total
pop2015 <- subset(population, year==2015 & age %in% ages)
female <- pop2015$female_pct
male <- pop2015$male_pct
population <- read.csv("data/us-pop-age-sex.csv", stringsAsFactors=FALSE)
population <- read.csv("us-pop-age-sex.csv", stringsAsFactors=FALSE)
library(animation)
population <- read.csv("data/us-pop-age-sex.csv", stringsAsFactors=FALSE)
install.packages("animation", dependencies = TRUE)
library(animation)
library(animation)
install.packages("ImageMagick")
library(ggplot2)
setwd("/Users/X/PycharmProjects/multiobj")
data <- read.csv("stateWithAction_[0, 1].csv", stringsAsFactors=FALSE)
ggplot(data, aes(x=x, y=y, colour=actionList)) + geom_point()#以颜色区分
library(ggplot2)
setwd("/Users/X/PycharmProjects/multiobj")
data <- read.csv("stateWithAction_[0, 1].csv", stringsAsFactors=FALSE)
data <- read.csv("stateWithAction_[0, 1].csv", stringsAsFactors=FALSE)
library(ggplot2)
setwd("/Users/X/PycharmProjects/multiobj")
data <- read.csv("stateWithAction_[1, 0].csv", stringsAsFactors=FALSE)
ggplot(data, aes(x=x, y=y, colour=actionList)) + geom_point()#以颜色区分
setwd("/Users/X/PycharmProjects/multiobj")
# 读取文件
filenames<-list("stateWithAction_[0, 1].csv","stateWithAction_[1, 0].csv")
for(filename in filenames){
data <- read.csv(filename, stringsAsFactors=FALSE)
ggplot(data, aes(x=x, y=y, colour=actionList)) + geom_point()
}
setwd("/Users/X/PycharmProjects/multiobj")
# 读取文件
filenames<-list("stateWithAction_[1, 0].csv","stateWithAction_[1, 0].csv")
for(filename in filenames){
data <- read.csv(filename, stringsAsFactors=FALSE)
ggplot(data, aes(x=x, y=y, colour=actionList)) + geom_point()
}
#library(gcookbook)
library(ggplot2)
setwd("/Users/X/PycharmProjects/multiobj")
data <- read.csv("stateWithAction_[1, 0].csv", stringsAsFactors=FALSE)
ggplot(data, aes(x=x, y=y, colour=actionList)) + geom_point()#以颜色区分
#library(gcookbook)
library(ggplot2)
setwd("/Users/X/PycharmProjects/multiobj")
data <- read.csv("test.csv", stringsAsFactors=FALSE)
data$actionList[data$actionList==1]<-stay
data$actionList[data$actionList==0]<-left
data$actionList[data$actionList==2]<-right
ggplot(data, aes(x=x, y=y, colour=actionList)) + geom_point()#以颜色区分
data$actionList[data$actionList==1]<-stay
data$actionList[data$actionList==1]<-stay
data$actionList[data$actionList==1]<-'stay'
#library(gcookbook)
library(ggplot2)
setwd("/Users/X/PycharmProjects/multiobj")
data <- read.csv("test.csv", stringsAsFactors=FALSE)
data$actionList[data$actionList==1]<-'stay'
data$actionList[data$actionList==0]<-'left'
data$actionList[data$actionList==2]<-'right'
ggplot(data, aes(x=x, y=y, colour=actionList)) + geom_point()#以颜色区分
#library(gcookbook)
library(ggplot2)
setwd("/Users/X/PycharmProjects/multiobj")
data <- read.csv("stateWithAction_[0, 1].csv", stringsAsFactors=FALSE)
data$actionList[data$actionList==1]<-'stay'
data$actionList[data$actionList==0]<-'left'
data$actionList[data$actionList==2]<-'right'
ggplot(data, aes(x=x, y=y, colour=actionList)) + geom_point()#以颜色区分
#library(gcookbook)
library(ggplot2)
setwd("/Users/X/PycharmProjects/multiobj")
data <- read.csv("stateWithAction_[0.1, 0.9].csv", stringsAsFactors=FALSE)
data$actionList[data$actionList==1]<-'stay'
data$actionList[data$actionList==0]<-'left'
data$actionList[data$actionList==2]<-'right'
ggplot(data, aes(x=x, y=y, colour=actionList)) + geom_point()#以颜色区分
#library(gcookbook)
library(ggplot2)
setwd("/Users/X/PycharmProjects/multiobj")
data <- read.csv("stateWithAction_[0.2, 0.8].csv", stringsAsFactors=FALSE)
data$actionList[data$actionList==1]<-'stay'
data$actionList[data$actionList==0]<-'left'
data$actionList[data$actionList==2]<-'right'
ggplot(data, aes(x=x, y=y, colour=actionList)) + geom_point()#以颜色区分
#library(gcookbook)
library(ggplot2)
setwd("/Users/X/PycharmProjects/multiobj")
data <- read.csv("stateWithAction_[0.3, 0.7].csv", stringsAsFactors=FALSE)
data$actionList[data$actionList==1]<-'stay'
data$actionList[data$actionList==0]<-'left'
data$actionList[data$actionList==2]<-'right'
ggplot(data, aes(x=x, y=y, colour=actionList)) + geom_point()#以颜色区分
#library(gcookbook)
library(ggplot2)
setwd("/Users/X/PycharmProjects/multiobj")
data <- read.csv("stateWithAction_[0.4, 0.6].csv", stringsAsFactors=FALSE)
data$actionList[data$actionList==1]<-'stay'
data$actionList[data$actionList==0]<-'left'
data$actionList[data$actionList==2]<-'right'
ggplot(data, aes(x=x, y=y, colour=actionList)) + geom_point()#以颜色区分
#library(gcookbook)
library(ggplot2)
setwd("/Users/X/PycharmProjects/multiobj")
data <- read.csv("stateWithAction_[0.5, 0.5].csv", stringsAsFactors=FALSE)
data$actionList[data$actionList==1]<-'stay'
data$actionList[data$actionList==0]<-'left'
data$actionList[data$actionList==2]<-'right'
ggplot(data, aes(x=x, y=y, colour=actionList)) + geom_point()#以颜色区分
#library(gcookbook)
library(ggplot2)
setwd("/Users/X/PycharmProjects/multiobj")
data <- read.csv("stateWithAction_[0.6, 0.4].csv", stringsAsFactors=FALSE)
data$actionList[data$actionList==1]<-'stay'
data$actionList[data$actionList==0]<-'left'
data$actionList[data$actionList==2]<-'right'
ggplot(data, aes(x=x, y=y, colour=actionList)) + geom_point()#以颜色区分
#library(gcookbook)
library(ggplot2)
setwd("/Users/X/PycharmProjects/multiobj")
data <- read.csv("stateWithAction_[0.7, 0.3].csv", stringsAsFactors=FALSE)
data$actionList[data$actionList==1]<-'stay'
data$actionList[data$actionList==0]<-'left'
data$actionList[data$actionList==2]<-'right'
ggplot(data, aes(x=x, y=y, colour=actionList)) + geom_point()#以颜色区分
#library(gcookbook)
library(ggplot2)
setwd("/Users/X/PycharmProjects/multiobj")
data <- read.csv("stateWithAction_[0.8, 0.2].csv", stringsAsFactors=FALSE)
data$actionList[data$actionList==1]<-'stay'
data$actionList[data$actionList==0]<-'left'
data$actionList[data$actionList==2]<-'right'
ggplot(data, aes(x=x, y=y, colour=actionList)) + geom_point()#以颜色区分
#library(gcookbook)
library(ggplot2)
setwd("/Users/X/PycharmProjects/multiobj")
data <- read.csv("stateWithAction_[0.9, 0.1].csv", stringsAsFactors=FALSE)
data$actionList[data$actionList==1]<-'stay'
data$actionList[data$actionList==0]<-'left'
data$actionList[data$actionList==2]<-'right'
ggplot(data, aes(x=x, y=y, colour=actionList)) + geom_point()#以颜色区分
#library(gcookbook)
library(ggplot2)
setwd("/Users/X/PycharmProjects/multiobj")
data <- read.csv("stateWithAction_[1, 0].csv", stringsAsFactors=FALSE)
data$actionList[data$actionList==1]<-'stay'
data$actionList[data$actionList==0]<-'left'
data$actionList[data$actionList==2]<-'right'
ggplot(data, aes(x=x, y=y, colour=actionList)) + geom_point()#以颜色区分
